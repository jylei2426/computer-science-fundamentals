Stacks and Queues

1. What is the main difference between a stack and a queue?
The Stack data structure arranges elements in LIFO priority and Queue data structure arranges elements in FIFO priority.


2.What are the similarities between stacks and queues?
Both handle data flow. Stacks use push and pop to add data to the stack. Stacks use LIFO and queues use FIFO. Both can be used but queues are more common. 

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?
In the UNDO option, LIFO would be The last element is the first to leave. LIFO would be used to place the last change back onto the top of the stack. 
For the REDO option, FIFO is when first element processed is the first to leave.
FIFO Would be used to add a change back into the queue of completed changes.

Programming Questions

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

function reverseString(str) {
    var newString = "";
    for (var i = str.length - 1; i >= 0; i--) {
        newString += str[i];
    }
    return newString;
}

reverseString("Bloc!")
// "!colB"

2.Implement the delete functionality of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure.

To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be deleted and returned.

CLASS Stack
 FUNCTION pop(queue)
   ...fill in pseudocode here
 END FUNCTION
END CLASS

Answer:

CLASS Stack
 FUNCTION pop(queue)
   ENTER queue array
   CALL deleteElement function
   FOR LOOP through elements in queue array
   PUSH elements
   CALL pop function on array to delete last element
   RETURN new array
 END FUNCTION
END CLASS

class Stack {
  constructor(item){
  this.queue = ["1", "2", "3"];
}
deleteItem(item){
  for(var i = 0; i > this.queue.length; i++){
    this.queue.push(item[i]);
}
this.queue.pop();
return this.queue;
}
}
let stack = new Stack();

stack.deleteItem([]);


3.Fill in the methods for the following Queue class so that it will work as expected (FIFO).
CLASS QUEUE
 FUNCTION enqueue(element)
   ...fill in pseudocode here
 END FUNCTION

 FUNCTION dequeue
   ...fill in pseudocode here
 END FUNCTION
END CLASS

Answer:

CLASS QUEUE
 FUNCTION enqueue(element)
 THEN push items(element)
 END FUNCTION

 FUNCTION dequeue
THEN shift items()
 END FUNCTION
END CLASS

