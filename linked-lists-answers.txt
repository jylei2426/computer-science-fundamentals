Linked Lists

1. What are some pros and cons of using linked lists instead of arrays?

A pro is node memory independence allows linked lists to easily grow to immense sizes. 
A con is inefficient to access an element within the list and must be accessed in order, while arrays can be indexed.

2.Come up with a real world example of a linked list.

A real world example can be season of vampire diaries. One must watch the first, next, and the next leading to the end result of drama.

Programming Questions

 Before beginning to code, write out a plan explaining how to solve the question.

1.The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code. 

LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   next: null
 }

 IF the head node does not exist
   THEN SET head to node
 ELSE
   SET current node to head
   SET current.next to node
 }
}

Answer: 

LinkedList.prototype.push = function(element) {
     var node = new Node(element);
     currentNode = this.head;

     if (!currentNode){
       this.head = node;
     } else {
       currentNode.next = currentNode;
     }
     currentNode.next = node;
};

2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

function LinkedList() {
  this.head = null;
}

Answer:

LinkedList.prototype.removeDuplicates = function(){
  if (!this.head || !this.head.next){
    console.log('No duplicates were found.');
    return;
  }

  var b1;
  var b2;
  var b3;
  var value;
  b2 = this.head;

  while(b2) {
    val = b2.data;
    b1 = b2;
    b3 = b1.next;

    while(b3){
      if (b3.data === value){
        b1.next = b3.next;
      } else {
        b1 = b3;
      }
      b3 = b3.next;
    }
    b2 = b2.next;
  }
};


function LinkedList() {
  this.head = null;
}

LinkedList.prototype.removeDuplicates = function(){
  if (!this.head || !this.head.next){
    console.log('No duplicates were found. Empty or a single element Linked List.');
    return;
  }

  var n1;
  var n2;
  var n3;
  var value;
  n2 = this.head;

  while(n2) {
    val = n2.data;
    n1 = n2;
    n3 = n1.next;

    while(n3){
      if (n3.data === value){
        n1.next = n3.next;
      } else {
        n1 = n3;
      }
      n3 = n3.next;
    }
    n2 = n2.next;
  }
};
function LinkedList() {
  this.head = null;
}

LinkedList.prototype.removeDuplicates = function(){
  if (!this.head || !this.head.next){
    console.log('No duplicates were found. Empty or a single element Linked List.');
    return;
  }

  var n1;
  var n2;
  var n3;
  var value;
  n2 = this.head;

  while(n2) {
    val = n2.data;
    n1 = n2;
    n3 = n1.next;

    while(n3){
      if (n3.data === value){
        n1.next = n3.next;
      } else {
        n1 = n3;
      }
      n3 = n3.next;
    }
    n2 = n2.next;
  }
};


3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a



LinkedList.prototype.reverse = function(){
  currentNode = this.head;
  nextNode = currentNode.next;

while(nextNode) {
  var temporary = nextNode.next;
  nextNode.next = currentNode;
  currentNode = nextNode;
  nextNode = temporary;
}

this.head.next = null;
this.head = currentNode;
};


