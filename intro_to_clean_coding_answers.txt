1. In your own words, explain what clean code is and why it is important.
Clean coding is referring to code that is readable, easily maintained, and structured simply which uses good naming conventions. DRY to minimize repetition, self-documenting code, single responsibility principle to focus one responsibility for every function and class, squint test to review patterns for refactoring, extracting methods, etc.

2.Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.
We could use health insurance benefit plan that would rely on computers. If the code was not created to an acceptable standard, then there would problems that could occur when consumers select plans, check benefit summaries, and reviewing patient documents which could lead to hippa violations and security issues that could cause the company to be sued or malpractice.

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)              // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

Answer: No, the code can be refactored. We can extract methods to refactor code to improve the readability of the code. 

FUNCTION do(x, y) 		// Creating a new function
IF y = "F" THEN			// Check if y is equal "F"
CALL z = toCelsius(x)  
PRINT z 			// Print result
ELSE IF y = "C" THEN 		// If y not equal to "F", check if equal to "C"
CALL z = toFahrenheit(x)
PRINT z 			// Print result
END IF
END FUNCTION

FUNCTION toCelsius(x)  		// Formula to convert degrees fahrenheit to celsius          
 z to (x−32) * (5/9) 
END FUNCTION

FUNCTION toFahrenheit(x)       // Formula to convert degrees celsius to fahrenheit 
 z to x * 1.8000 + 32.00 
END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

Answer: The code is clean code. It is readable and It does not need to be refactored (extract methods)

5.Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.
a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

Answer to a: refactoring the code is below

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION


FUNCTION getPayment()
 RETURN amount
END FUNCTION

b. The following function checks out a book if there are no issues with the guest's account.
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

Answer to b:

FUNCTION checkoutBook(book, guest)
IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND IF guest.outstandingFees = 0 THEN
    APPEND book to guest.books
        SET book.status to "Checked Out"
        PRINT "Your books have been issued."
    END IF
ELSE
     PRINT "Unable to check out book."
END IF
END FUNCTION

c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.
CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Answer to c: 

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

END

CLASS CreditCard
 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

END

CLASS checkChecking
 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

END

Programming Questions

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

function isSumSquare(array){
  let sum = 0;
  for(var i = 0; i<array.length;i++){
     sum = array[i] + sum;
}
  if (sum > 0 && Math.sqrt(sum) % 1 === 0){
    return (Math.sqrt(sum));
  } else {
    return sum;
  }
}

var= [10,1,4,6,1,1,2];

isSumSquare(array);

7.Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function duplicateElements(array){
  for(var element = 0; element < array.length; element++){
    for (var otherElement = 0; otherElement < element; otherElement++) {
            if (array[element] === array[otherElement]){
              return true;  
            }
            }
    }
  return false;
  }
let array = [1,2,3,3];

duplicateElements(array); //returns true

