Introduction to Data Structures

1. A line of people at an amusement park ride.
The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

let anArray = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

anArray.push("Mary");

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

function findSomeone (name){
   return (anArray.indexOf(name));
  }
findSomeone(“Josh”)

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

function findSomeone (name){
   return (anArray.indexOf(name));
  }

findSomeone("Emily") // -1

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

let anArray = ["Vivian", "Ava", "Josh", "Patrick", "Mike", "Mary”];
anArray.splice(1, 0, "Melissa")
console.log(anArray) // ["Vivian", "Melissa", "Ava", "Josh", "Patrick", "Mike", "Mary"]

or 

function inFront(newName,existingName){
  anArray.splice(anArry.indexOf(existingName), 0, newName);
  console.log(anArray);
}

console.log(inFront(“Melissa","Ava"));

f) If Patrick wants to leave the line, how would you delete him from the array?

anArray.splice(4,1); // ["Vivian", "Melissa", "Ava", "Josh", "Mike", "Mary"]

or 

function deleteAnArray(name){
  for (let i = 0; i<anArray.length; i++)
  if (anArray[i] === name)
  anArray.splice(i,1);
  console.log(anArray);
}
deleteAnArray("Patrick") 

2.Provide another real-world example that you can model using a data structure.
It could be a family tree.

3. How would your data structure allow developers to access and manipulate the data?
developers can access and manipulate the data by adding graphs and and trees.

