Hash Tables

1. What is a hash table?
Hash table is a type of data structure that stores each value by linking it to a key, forming key-value pairs.

2.What is hashing?
A process of converting arbitrary data into a fixed-length hash code using a hashing function.Hashing is the conversion from a string to a numerical index. 

3.How does a hash table store data?
Hash tables are commonly used to store data by some form of identifier, are intended to be used as collections of similar data.

4.How are hash tables and objects different?
Objects are used when data is a static number of distinct values of different types.
For hash tables, one would look at the nature of the data and when data is a list of values with no need for an identifier.

5.Determine whether you would use a hash table or an object to store each of the following pieces of data:
-A list of pets and their unique names.
hash table
-The name, age, and the birthday of your best friend.
object
-The name and location of every company in a given city.
hash table
-All of the books checked out from a library by a particular individual.
hash table
-The primary and secondary phone numbers for a contact.
object

6.Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.

var hash = (string, max) => {
  var hash = 0;
  for (var i =0; i <= string.length; i++){
    hash += string.charAt(i);
}
return hash % max;
};

let HashTable = function() {
  let storage = [];
  const storageLimit = 100;

  this.print = function() {
    console.log(storage);
  };

  this.add = function(phone, name, customerAddress){
    var index = hash(phone, storageLimit);
    if (storage[index] === undefined) {
      storage[index] = [ [phone, name, customerAddress]
      ];
    } else {
      var input = false;
      for (var i =0; i < storage[index].length; i++) {
        if (storage[index][i][0] === phone) {
          storage[index][i][1] = customerAddress;
          input = true;
      }
    }
    if (input === false){
      storage[index].push([phone, name, customerAddress]);
    }
  }
};

this.remove = function(phone) {
  var index = hash(phone, storageLimit);
  if (storage[index].length === 1 && storage[index][0][0] === phone) {
    delete storage[index];
  } else {
    for (var i = 0; i < storage[index].length; i++){
      if (storage[index][i][0] === phone) {
        delete storage[index][i];
      }
    }
  }
};

this.lookup = function(phone) {
  var index = hash(phone, storageLimit);
  if (storage[index] === undefined){
    return undefined;
  } else {
    for (var i =0; i < storage[index].length; i++){
      if (storage[index][i][0] === phone) {
        return storage[index][i][1];
      }
    }
  }
};
};

var customers = new HashTable();
customers.add("555-444-3333”, “Jenny”, “122 Happy Street”);
customers.lookup(“222-222-2222”);

7.Build a system that allows a store owner to track their store's inventory using a hash table for storage.


var hash = function (string, max) {
  var hash = 0;
  for (var i = 0; i <string.length; i++){
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

var HashTable = function(){
  var storage = [];
  var storageLimit = 90;
  
  this.add = function(key, value){
    var index = hash(key, storageLimit);
    
    if (storage[index] === undefined) {
      storage[index] = [
        [key, value]
      ];
    } else {
      var input = false;
      
      for(var i = 0; i < storage[index].length; i++) {
        if(storage[index][i][0] === key) {
          storage[index][i][1] = value;
          input = true;
        }
      }
      
      if (input === false){
        storage[index].push([key, value]);
      }
    }
  };
  
  this.findItem = function(key) {
    var index = hash(key, storageLimit);
    
    if(storage[index] === undefined) {
      console.log("Item Not Found");
    } else {
      for (var i = 0; i < storage[index].length; i ++) {
        if (storage[index][i][0] === key) {
          console.log( storage[index][i][0] + " : " + storage[index][i][1]);
        }
      }
    }
  };
  
  this.showInventory = function(){
    console.log(storage);
  };
  
};

var storeInventory = new HashTable();


8.Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.


var hash = (string, max) => {
  var hash = 0;
  for (var i = 0; i < string.length; i++){
    hash += string.charCodeAt(i);
  }
  return hash % max;
};

let HashTable = function(){
  let storage = [];
  const storageLimit = 30;


  this.add = function(key, value){
    var index = hash(key, storageLimit);
    if (storage[index] === undefined){
      storage[index] = [
        [key, value]
        ];
    } else {
      var input = false;
      for (var i = 0; i < storage[index].length; i++){
        if (storage[index][i][0] === key){
          storage[index][i][1] = value;
          input = true;
        }
      }
      if (input === false) {
        storage[index].push([key, value]);
      }
    }
  };


  this.lookup = function (key) {
    var index = hash(key, storageLimit);
    if (storage[index] === undefined){
      return undefined;
    } else {
      for (var i = 0; i < storage[index].length; i++){
        if (storage[index][i][0] === key){
          return storage[index][i][1];
        }
      }
    }

    };


    this.lookupDate = function(value) {
      var index = hash(value, storageLimit);
      if(storage[index] === undefined){
        return undefined;
      } else {
        for (var i = 0; i < storage[index].length; i++){
          if (storage[index][i][1] === value) {
            return storage[index][i][2];
          }
        }
      }
    };
};

var digitalCopies = [{
  publisher: "",
  publicationDate: "",
  article: ""
}];

var articleTable = new HashTable();
articleTable.add(“Times-June-2018", "2018");
articleTable.lookup(“Times-June-2018");
articleTable.lookupDate("2018");

console.log(articleTable.lookup(“Times-June-2018"));
